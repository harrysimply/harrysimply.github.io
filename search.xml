<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【转】curl的常用用法</title>
      <link href="/2021/10/05/curl-de-chang-yong-yong-fa/"/>
      <url>/2021/10/05/curl-de-chang-yong-yong-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>因为在机房中往往使用命令行，在测试api或者测试elasticsearch数据库时往往需要大量使用curl命令，在网上找到了阮一峰老师的这篇笔记，里面基本涵盖了日常使用的大部分curl的参数。</p><p>这些参数的用法建议熟读并背诵。</p><p>本文忽略了一些不常用到的参数说明。</p></blockquote><p>作者：阮一峰</p><p>curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思。</p><p>它的功能非常强大，命令行参数多达几十种。如果熟练的话，完全可以取代 Postman 这一类的图形界面工具。</p><p>不带有任何参数时，curl 就是发出 GET 请求。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl &lt;https:&#x2F;&#x2F;www.example.com&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令向 <code>www.example.com</code>发出 GET 请求，服务器返回的内容会在命令行输出。</p><h2 id="d"><a href="#d" class="headerlink" title="-d"></a>-d</h2><p>  <code>-d</code>参数用于发送 POST 请求的数据体。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -d&#39;login&#x3D;emma＆password&#x3D;123&#39;-X POST &lt;https:&#x2F;&#x2F;google.com&#x2F;login&gt;# 或者$ curl -d &#39;login&#x3D;emma&#39; -d &#39;password&#x3D;123&#39; -X POST  &lt;https:&#x2F;&#x2F;google.com&#x2F;login&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用 <code>-d</code>参数以后，HTTP 请求会自动加上标头 <code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略 <code>-X POST</code>。</p><h2 id="F"><a href="#F" class="headerlink" title="-F"></a>-F</h2><p><code>-F</code>参数用来向服务器上传二进制文件。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -F &#39;file&#x3D;@photo.png&#39; &lt;https:&#x2F;&#x2F;google.com&#x2F;profile&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令会给 HTTP 请求加上标头 <code>Content-Type: multipart/form-data</code>，然后将文件 <code>photo.png</code>作为 <code>file</code>字段上传。</p><p><code>-F</code>参数可以指定 MIME 类型。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -F &#39;file&#x3D;@photo.png;type&#x3D;image&#x2F;png&#39; &lt;https:&#x2F;&#x2F;google.com&#x2F;profile&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令指定 MIME 类型为 <code>image/png</code>，否则 curl 会把 MIME 类型设为 <code>application/octet-stream</code>。</p><h2 id="H"><a href="#H" class="headerlink" title="-H"></a>-H</h2><p><code>-H</code>参数添加 HTTP 请求的标头。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -H &#39;Accept-Language: en-US&#39; &lt;https:&#x2F;&#x2F;google.com&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令添加 HTTP 标头 <code>Accept-Language: en-US</code>。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -H &#39;Accept-Language: en-US&#39; -H &#39;Secret-Message: xyzzy&#39; &lt;https:&#x2F;&#x2F;google.com&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令添加两个 HTTP 标头。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -d &#39;&#123;&quot;login&quot;: &quot;emma&quot;, &quot;pass&quot;: &quot;123&quot;&#125;&#39; -H &#39;Content-Type: application&#x2F;json&#39; &lt;https:&#x2F;&#x2F;google.com&#x2F;login&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令添加 HTTP 请求的标头是 <code>Content-Type: application/json</code>，然后用 <code>-d</code>参数发送 JSON 数据。</p><h2 id="i"><a href="#i" class="headerlink" title="-i"></a>-i</h2><p><code>-i</code>参数打印出服务器回应的 HTTP 标头。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -i https:&#x2F;&#x2F;www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。</p><h2 id="I"><a href="#I" class="headerlink" title="-I"></a>-I</h2><p><code>-I</code>参数向服务器发出 HEAD 请求，然会将服务器返回的 HTTP 标头打印出来。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -I https:&#x2F;&#x2F;www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令输出服务器对 HEAD 请求的回应。</p><p><code>--head</code>参数等同于<code>-I</code>。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl --head https:&#x2F;&#x2F;www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="k"><a href="#k" class="headerlink" title="-k"></a>-k</h2><p><code>-k</code>参数指定跳过 SSL 检测。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -k https:&#x2F;&#x2F;www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令不会检查服务器的 SSL 证书是否正确。</p><h2 id="L"><a href="#L" class="headerlink" title="-L"></a>-L</h2><p><code>-L</code>参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -L -d &#39;tweet&#x3D;hi&#39; https:&#x2F;&#x2F;api.twitter.com&#x2F;tweet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="–limit-rate"><a href="#–limit-rate" class="headerlink" title="–limit-rate"></a>–limit-rate</h2><p><code>--limit-rate</code>用来限制 HTTP 请求和回应的带宽，模拟慢网速的环境。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl --limit-rate 200k https:&#x2F;&#x2F;google.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令将带宽限制在每秒 200K 字节。</p><h2 id="o"><a href="#o" class="headerlink" title="-o"></a>-o</h2><p><code>-o</code>参数将服务器的回应保存成文件，等同于wget命令。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -o example.html https:&#x2F;&#x2F;www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令将<a href="http://www.example.com保存成example.html./">www.example.com保存成example.html。</a></p><h2 id="O"><a href="#O" class="headerlink" title="-O"></a>-O</h2><p><code>-O</code>参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -O https:&#x2F;&#x2F;www.example.com&#x2F;foo&#x2F;bar.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令将服务器回应保存成文件，文件名为bar.html</p><h2 id="u"><a href="#u" class="headerlink" title="-u"></a>-u</h2><p><code>-u</code>参数用来设置服务器认证的用户名和密码。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -u &#39;bob:12345&#39; https:&#x2F;&#x2F;google.com&#x2F;login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令设置用户名为bob，密码为12345，然后将其转为 HTTP 标头Authorization: Basic Ym9iOjEyMzQ1。</p><p>curl 能够识别 URL 里面的用户名和密码。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl https:&#x2F;&#x2F;bob:12345@google.com&#x2F;login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。</p><pre class="line-numbers language-none"><code class="language-none">$ curl -u &#39;bob&#39; https:&#x2F;&#x2F;google.com&#x2F;login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令只设置了用户名，执行后，curl 会提示用户输入密码。\</p><h2 id="v"><a href="#v" class="headerlink" title="-v"></a>-v</h2><p><code>-v</code>参数输出通信的整个过程，用于调试。</p><pre class="line-numbers language-none"><code class="language-none">$ curl -v https:&#x2F;&#x2F;www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>–trace参数也可以用于调试，还会输出原始的二进制数据。</p><pre class="line-numbers language-none"><code class="language-none">$ curl --trace - https:&#x2F;&#x2F;www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="x"><a href="#x" class="headerlink" title="-x"></a>-x</h2><p>-x参数指定 HTTP 请求的代理。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -x socks5:&#x2F;&#x2F;james:cats@myproxy.com:8080 https:&#x2F;&#x2F;www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令指定 HTTP 请求通过myproxy.com:8080的 socks5 代理发出。</p><p>如果没有指定代理协议，默认为 HTTP。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -x james:cats@myproxy.com:8080 https:&#x2F;&#x2F;www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令中，请求的代理使用 HTTP 协议.</p><h2 id="X"><a href="#X" class="headerlink" title="-X"></a>-X</h2><p><code>-X</code>参数指定 HTTP 请求的方法。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> -X POST https://www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令对<a href="https://www.example.com发出/">https://www.example.com发出</a> POST 请求。</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ol><li><a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">curl 的用法指南</a></li><li><a href="https://catonmat.net/cookbooks/curl">Curl Cookbook</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>火星救援</title>
      <link href="/2021/07/10/huo-xing-jiu-yuan/"/>
      <url>/2021/07/10/huo-xing-jiu-yuan/</url>
      
        <content type="html"><![CDATA[<p>“有时候，所有的情况都会对你不利。所有的坏事一起发生，你可能会想，就是这样了，这就是我的终点了。面对这种情况，你要么接受，要么想办法解决，这就是一切的真谛。解决问一个问题，然后接着解决下一个问题，循环往复，等你解决足够多的问题，你就可以回家了。”</p><p>–电影《火星救援》</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇日志</title>
      <link href="/2021/07/09/hello-world/"/>
      <url>/2021/07/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>由衷得说一声，hexo+github牛逼。</p><p>———— xuhuang</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
